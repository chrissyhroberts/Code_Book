---
title: "New lm Predict Left & Predict Right"
author: "Chrissy h Roberts"
---

ggplot has some lovely built-in geoms that can show model extrapolations. Sometimes you might want to only show a line either before or after a certain point on an axis. This script shows how to achieve this manually.

```{r,message=F}
library(tidyverse)
library(knitr)
```

## Make new functions

First we create a pair of new functions which decorate an *lm* object to the right.

```{r}

lm_right <- function(formula,data,...){
                                      mod <- lm(formula,data)
                                      class(mod) <- c('lm_right',class(mod))
                                      mod
                                      }

```

and another that decorates an *lm* object to the left.

```{r}

  lm_left <- function(formula,data,...){
                                        mod <- lm(formula,data)
                                        class(mod) <- c('lm_left',class(mod))
                                        mod
                                        }
```

Then create a new function which truncates the data of a model to the right of a defined point

```{r}
  predictdf.lm_right <- 
    function(model, xseq, se, level){
                            init_range = range(model$model$x)
                            xseq <- xseq[xseq >=init_range[1]]
                            ggplot2:::predictdf.default(model, xseq[-length(xseq)], se, level)
                                    }


```

and a counterpart which does the same, but to the left

```{r}
 predictdf.lm_left <- 
    function(model, xseq, se, level){
                            init_range = range(model$model$x)
                            xseq <- xseq[xseq <=init_range[2]]
                            ggplot2:::predictdf.default(model, xseq[-length(xseq)], se, level)
                                    }


```

Now we can apply the new functions to a dummy dataset to get a feel for what they do

## Dummy Data Set

The dummy data set is a simulated time series where some kind of intervention took place at time point 85. The variable *intv* shows if the intervention has happened, whilst *intv_trend* counts the time elapsed since the intervention. *Time* is the study time from the first point. *count* is a measurable outcome.

```{r}
int = 85
set.seed(42)

df <- data.frame(
                count = as.integer(rpois(132, 9) + rnorm(132, 1, 1)),
                time = 1:132,  
                at_risk = rep(
                          c(4305, 4251, 4478, 4535, 4758, 4843, 4893, 4673, 4522, 4454, 4351),
                          each  = 12
                             )
                ) %>% 
  mutate(
    month = rep(factor(month.name, levels = month.name),11),
    intv = ifelse(time >= int, 1, 0),
    intv_trend = c(rep(0, (int - 1)),1:(length(unique(time)) - (int - 1))),
    lag_count = dplyr::lag(count)
  )
head(df)
```

## Apply a model to the data

```{r}
fit <- glm(
          count ~ month + time + intv + intv_trend + log(lag_count) + offset(log(at_risk)),
          family = "poisson",
          data = df
          )

summary(fit)
```

## Predict / Extrapolate data

Let's split the data in to three 'phases' including "Pre-intervention","Intervention" and "Post-Intervention". We'll then predict the direction of travel on the model using *predict*

```{r}
df$group = rep(c("Control","PreIntervention","Intervention","PostIntervention"), c(30,32, 35,35))


df$predict = c(NA, predict(fit, type="response"))

kable(df[50:70,])
```

## Plot models

A strength of this approach is that the new functions act like geoms in a ggplot.

Here, we plot the pre-intervention trend, its extrapolation to the right (using method "lm_right"). We also show the post-intervention trend, extrapolating it backwards to the left (using method "lm_left").

```{r,message=F,error=F}
  ggplot(data = df, aes(x = time, y = predict)) +

    geom_line() +
    geom_smooth(data=filter(df,group=="Control"),method="lm", se=TRUE, aes(colour=group),fullrange=FALSE)+
    geom_smooth(data=filter(df,group=="PreIntervention"),method="lm", se=TRUE, aes(colour=group),fullrange=FALSE)+
    geom_smooth(data=filter(df,group=="Intervention"),method="lm", se=TRUE, aes(colour=group),fullrange=FALSE)+
    geom_smooth(data=filter(df,group=="PostIntervention"),method="lm", se=TRUE, aes(colour=group),fullrange=FALSE)+
    geom_smooth(data=filter(df,group=="Intervention"),method="lm_left", se=TRUE, aes(colour=group),fullrange=TRUE, linetype = "dashed",alpha=0.1)+
    geom_smooth(data=filter(df,group=="PreIntervention"),method="lm_right", se=TRUE, aes(colour=group),fullrange=TRUE, linetype = "dashed",alpha=0.1)

```

This is a neat trick, but in most circumstances you can probably make good use of an extrapolation from the truncated data as described in the section on [Interrupted Time Series Analysis](Interrupted_Time_Series.qmd)
