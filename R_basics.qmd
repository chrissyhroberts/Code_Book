---
title: "Basics of R"
format: html
editor: visual
---

This section is intended to provide a very bare bones explanation of how to do some things in R.

It covers some basic methods including reading and writing data, manipulating and reshaping datasets with tidyverse verbs and drawing some simple charts with ggplot2. For much better resources, please use <https://r4ds.hadley.nz/> which is awesome.

This is a work in progress.

## Load Libraries

Libraries (also known as packages) allow R to do things it can't do out of the box.\
You can install packages using the `install.packages("packagename")` syntax. If you haven't used R before then you should first install the tidyverse packages by typing `install.packages("tidyverse")`

You should always load the libraries you'll be using at the top of your script.

```{r}

library(tidyverse)
library(readxl)   # For reading xls and xlsx files
library(haven)    # For reading Stata files

```

## Write CSV files

We'll be using the iris dataset, which is built in and which can be accessed by typing `iris`.

We need a toy dataset to work with, so let's start by saving a copy of `iris` as a csv file. This is backwards from what we normally do, which is to save a data set at the end, but will serve our purpose here.

```{r}

write_csv(iris, "iris.csv")  # Saving to CSV

```

Check that it appears in the files list on the right

## Read CSV files

Next let's read the file back in and assign it to a data frame

The `<-` symbol assigns the data contained in the file to an **object** in the R environment.

You can have as many or as few objects as you need.

```{r}

iris_data <- read_csv("iris.csv")
```

The messages are important. Check which variables have been assigned to which **class**

-   **chr**:

    -   Full Form: **character**

    -   Used for columns containing text data (strings).

-   **dbl or num**:

    -   Full Form: **double/number**

    -   Represents floating-point numbers (numeric values with decimal places).

    -   This is the most common numeric data type used in R for real numbers.

-   **int**:

    -   Full Form: **integer**

    -   Used for whole numbers.

-   **lgl**:

    -   Full Form: **logical**

    -   Used for boolean (TRUE/FALSE) values.

-   **fct**:

    -   Full Form: **factor**

    -   Used for categorical data (discrete values like categories, levels, or groups).

-   **dttm**:

    -   Full Form: **date-time**

    -   Represents date and time objects (POSIXct class) which include both date and time information.

-   **date**:

    -   Full Form: **Date**

    -   Used for date objects, containing only date information (year, month, day).

-   **time**:

    -   Full Form: **time**

    -   Used for time objects (sometimes seen when working with time series data, though less common than date or POSIXct).

-   **lst**:

    -   Full Form: **list**

    -   Represents a list column, which can hold any type of R object, including vectors, data frames, or even other lists.

## Other types of files

If you're just beginning, leave this section for later.\
Often you'll need to work with CSV, STATA, XLS, XLSX. This section shows you how to list, find the size, read and write data in other format.

```         
# Load necessary libraries
library(readxl)   # For reading xls and xlsx files
library(haven)    # For reading Stata files

# List files in the directory recursively and show their sizes
file_info <- tibble(
  file_name = list.files("/data", full.names = TRUE, recursive = TRUE),
  file_size = file.info(list.files("p:/foo/bar bar", full.names = TRUE, recursive = TRUE))$size
)

# Display file information
print(file_info)

# Current working directory to save files
output_dir <- getwd()

# Read and save a CSV file
csv_data <- read_csv("p:/foo/bar bar/example.csv")
write_csv(csv_data, file.path(output_dir, "example_saved.csv"))

# Read and save an XLS file
xls_data <- read_excel("p:/foo/bar bar/example.xls")
write_csv(xls_data, file.path(output_dir, "example_saved_from_xls.csv"))

# Read and save an XLSX file
xlsx_data <- read_excel("p:/foo/bar bar/example.xlsx")
write_csv(xlsx_data, file.path(output_dir, "example_saved_from_xlsx.csv"))

# Read and save a Stata file
dta_data <- read_dta("p:/foo/bar bar/example.dta")
write_csv(dta_data, file.path(output_dir, "example_saved_from_dta.csv"))

# Print a message confirming completion
message("Files listed, read, and saved in the current working directory: ", output_dir)
```

## Look at the structure of an object

```{r}
str(iris_data)
```

## Look at the contents of an object

```{r}
iris_data
```

### Summary of the data set

```{r}
summary(iris_data)
```

## Pipes

The **`%>%`** pipe operator, commonly called the "pipe," is one of the most important tools in the **tidyverse**. It is used to pass the result of one function into the next function, making your code cleaner and easier to read by chaining operations together.

### How the Pipe Works:

The pipe takes the output of the expression on its left and passes it as the **first argument** to the function on its right.

$$ \texttt{result} \leftarrow \texttt{data} \\ \hspace{2cm} \% \! > \! \% \, \texttt{operation}_1 \\ \hspace{2cm} \% \! > \! \% \, \texttt{operation}_2 \\ \hspace{2cm} \vdots \\ \hspace{2cm} \% \! > \! \% \, \texttt{operation}_n$$

### Simple Explanation:

-   Without the pipe, you would need to **nest** functions, which can make the code harder to read:

`summarise(group_by(filter(df, Species == "setosa"), Species), mean_length = mean(Sepal.Length))`

-   With the **`%>%`** pipe, you can write it more **readable** by breaking each step down:

    ```{r}

    iris_data %>%
      filter(Sepal.Length >5.8) %>%
      group_by(Species) %>%
      summarise(mean_length = mean(Sepal.Length))


    ```

### Benefits of Using the Pipe:

-   **Improves readability**: It reads like a logical sequence of steps.

-   **Reduces the need for intermediate variables**: You don’t need to create multiple intermediate objects.

-   **Simplifies function chaining**: Functions are applied one after the other, making it clear what happens at each step.

## Single Table Verbs (basic)

All the main actions in tidyverse take a tibble (the new name for a dataframe), do something with it and then return another tibble. These are the 'single table verbs'.

-   These are the main functions you'll need to learn.

-   All of them accept lists, where you separate items with a comma.

### Filter

-   **`filter()`**:

    -   Filters rows based on specified conditions.

    -   Returns only the rows that meet the condition(s).

```{r}
iris_data %>% 
  filter(
    Species == "setosa",
    Sepal.Length > 4.3)
```

### Logic

-   You can provide `logical operators`\` to any verb to make complex queries

    -   `==` Equals

    -   != Not Equals

    -   `>` more than

    -   `<` less than

    -   `>=` more than or equal to

    -   `<=` less than or equal to

    -   `|` or

    -   `&` and

    -   `!` not

    -   `+` add

    -   `-` subtract

    -   `%%` modulo

### AND (&)

Filtering rows where Sepal.Length is greater than 5 AND Species is not setosa

```{r}

iris_data %>% 
  filter(
    Sepal.Length > 5 & Species != "setosa"
    )

```

### OR (\|)

Filtering rows where Sepal.Length is less than 5 OR Species is setosa

```{r}

iris_data %>% 
  filter(
    Sepal.Length < 5 | Species == "setosa"
    )

```

### NOT (!)

Filtering rows where Species is NOT "setosa" by negating the test with `!` placed at the start. Compare to above where `!=` was used for `not-equal`. Here it tests if the species equals setosa, then returns all rows where that is NOT true.

```{r}

iris_data %>% 
  filter(
    !(Species == "setosa")
    )


```

### 

### Arrange

-   **`arrange()`**:

    -   Orders rows of a tibble by one or more columns.

    -   Can sort in ascending or descending order.

    -   Using a `list` will sort by item 1, then item 2, then item 3.

    -   As with filter, this function can accept a list of actions that are carried out sequentially

```{r}

iris_data %>% 
  arrange(
    Sepal.Length,
    Sepal.Width,
    Species
    )
```

```{r}
iris_data %>% 
  arrange(
    !Sepal.Length,
    Sepal.Width,
    Species
    )
```

### Select

-   **`select()`**:

    -   Selects specific columns from a data frame or tibble.

    -   Useful for reducing data to only the columns of interest.

    -   As with other verbs, a sequential set of actions is possible

```{r}
iris_data %>% 
  select(
    Sepal.Length, 
    Species
    )

```

-   It's also possible to negate an action,

```{r}
iris_data %>% 
  select(
    !Species
    )
```

### Mutate

-   **`mutate()`**:

    -   Adds new columns or modifies existing columns in a tibble.

    -   Commonly used for creating calculated columns.

```{r}
iris_data %>%
  mutate(
    Petal.Ratio = Petal.Length / Petal.Width,
    Petal.Area = Petal.Length * Petal.Width
         )
```

### Pivot_longer

-   **`pivot_longer()`**:

    -   Converts wide data to long format (stacking columns into rows).

    -   Useful for transforming data when working with multiple measurement columns.

    -   We'll use `relig_income` as an example data set. This is in WIDE format.

```{r}
relig_income
```

-   To pivot this data set, we provide

    -   `cols =` : The columns that will be used to pivot in to the new 'values' column. Here we want all columns from the dataset except the `religion` column which provides the labels, so simply exclude that one with `!religion`. You could also specify specific columns with a list `cols = c("<$10k","$10-20k","$20-30k")`

```{r}
relig_income_long <- relig_income %>%
    pivot_longer(
      cols = !religion, 
      names_to = "income", 
      values_to = "n")

relig_income_long


```

### Pivot_wider

This is the exact opposite of pivot_longer. You'll be taking the values of a column (here `income`) that you want to pivot to be the new column `names` in the wide format tibble, then distributing the `values` of another column (here `count`) to the appropriate columns and rows (here `religion`).

```{r}
relig_income_long %>%
  pivot_wider(
    id_cols = religion,
    names_from = income, 
    values_from = n
    )

```

### Using pipes and verbs together

To do a series of things to a tibble, you simply pipe the verbs

```{r}

relig_income %>%
    pivot_longer(  
      cols = !religion, 
      names_to = "income", 
      values_to = "count") %>% 

    filter(
      income != "Don't know/refused"
          ) %>% 

    arrange(
      income,
      religion
          )

```

-   You can include notes if it helps you.

-   Using indentation also really helps

```{r}

relig_income %>%
  
    # Pivot the table to be long format
    pivot_longer(  
      cols = !religion, 
      names_to = "income", 
      values_to = "count") %>% 
  
    # Remove lines where no income data was provided
    filter(
      income != "Don't know/refused"
          ) %>% 
  
    # Sort the data to sho 
    arrange(
      income,
      religion
          )
```

### Group_by

-   These verbs create a data frame with one row per `group`, where the variables are a summary of values. `group_by` groups data by one or more columns,

`group_by` allows you to create groupwise calculations like group means

This approach does not collapse the data, so if you wanted three rows, with a single mean value for each one, you need to do something else (see below).

Always `ungroup()` if you plan to do further calculations on individual rows.

```{r}
iris %>% 
  group_by(Species) %>% 
  mutate(
    Sepal.length.mean = mean(Sepal.Length),
    weight = Sepal.Length - Sepal.length.mean
  )%>% 
  ungroup()
```

-   `Summarise()` and `reframe()` are almost always used in combination with `group_by().`

-   As with all verbs, you can provide lists to `group_by()`, `reframe()` and `summarise().`

-   

    ### Reframe

    -   **Purpose**: A more flexible way to return multiple results for each group without reducing it to one row per group.

    -   **Typical Use**: Used when you want to keep multiple rows per group but still perform summary operations. i.e. when creating denominators etc.

    -   **Behavior**: Allows for returning multiple rows or multiple values for each group, so it doesn’t necessarily collapse the data.

    -   If you choose to include any of the original variables in your reframed tibble, the resulting tibble will have the same dimensions as your original. Here the groupwise counts are added to `count` and the groupwise mean sepal lengths are added to `mean.sepal.length`.

    ```{r}
    iris_data %>%
      group_by(Species) %>%
      reframe(
        Sepal.Length,
        Sepal.Width,
        count = n(),
        sepal.length.mean = mean(Sepal.Length),
        weight = Sepal.Length-sepal.length.mean
      ) 
    ```

If you choose not to include your original variables, `reframe()` will present only the new variables.

```{r}
iris %>%
  group_by(Species) %>%
  reframe(
    count = n(),
    mean.sepal.length = mean(Sepal.Length),
    median.petal.length = median(Petal.Length),
    sd.petal.length = sd(Petal.Length)
  )
```

-   **`summarise()`**:

    -   Creates summary statistics for each group, such as mean, median, or sum.

    -   In this case `summarise()` creates the same table as the previous example of `reframe`

    -   This shows how you can always use `reframe` so generally forget about using `summarise()`

```{r}

iris_data %>%
  group_by(Species) %>%
  summarise(
    count = n(),
    mean.sepal.length = mean(Sepal.Length),
    median.petal.length = median(Petal.Length)
            )
```

### Rename

-   **`rename()`**:

    -   Renames columns in a tibble.

    -   Helpful for cleaning up column names for clarity.

```{r}

iris_data %>% 
  rename(
    var_a = Petal.Length,
    var_b = Petal.Width
    )
```

## Joining

-   **`left_join()` / `right_join()` / `inner_join()` / `full_join()`**:\\

Joins add columns from one tibble to another, matching the observations using key variables.

There are three types of join

-   A `left_join()` keeps all observations in `x`.

-   A `right_join()` keeps all observations in `y`.

-   A `full_join()` keeps all observations in `x` and `y`.

We'll use the `band_members` and `band_instruments` data frames for this

```{r}
band_members
```

```{r}
band_instruments
```

You can see that both tibbles contain two variables, of which one is called `name`. This will be the **key variable** that is used for joining. R will automatically look for matching variables, and will merge the data semi-automatically. It even works if there's more than one key variable.

### Left join

```{r}

band_members %>% 
left_join(
  band_instruments
)
```

You can see that the new left_joined tibble now contains three variables.

All three band members who were in the `band_members` tibble are still represented here, but `Keith` is not included in this tibble because `left_join` adds new columns to observations that already exist in `band_members`

### Right Join

The `right_join` works in exactly the opposite way. Here the `right_join` adds new columns to the observations of the right hand tibble (i.e. to band_instruments).

```{r}

right_join(
  band_members,
  band_instruments
)
```

### Full Join

The `full_join` keeps all the observations and all the columns of both data sets.

```{r}
full_join(
  band_members,
  band_instruments
)
```

## ggplot

Now we've covered the basics of managing and manipulating tibbles, let's look at the basics of drawing charts in ggplot.

To understand the syntax of ggplot, you have to understand how charts created with this system are built in layers. Just like how we pipe data through `%>%` when handling tibbles, we add new layers to ggplot charts using `+`

ggplot accepts piped data as an input. The initial ggplot is a blank chart with no axes. Let's pipe the `iris` tibble in to a ggplot.

```{r}

iris %>% 
  ggplot() 
```

Next we want to describe the 'aesthetics' of the plot. This is how we define the variables that will contribute to the axes, groups, points, shapes, fills, areas and so on.

Let's provide ggplot with some aesthetics in the form of an x (Sepal.Length) and y (Sepal.Width)

This should add the axes which will be appropriately scaled according to the limits of the two variables.

```{r}
iris %>% 
  ggplot(aes(x = Sepal.Length,y = Sepal.Width)) 
```

To add some of the data points to the chart, we need to add a new layer. The type of chart is defined by which "`geom"` layer you choose to add next.

Let's start simple and draw some points with `geom_point()`. Remember to add the new layer by putting a `+` at the end of the last line

```{r}
iris %>% 
    ggplot(
      aes(
        Sepal.Length,
        Sepal.Width)
          ) +
      geom_point()
  
```

This is useful, but doesn't tell us anything about the points. Colours, grouping, fills etc are defined in the aesthethics, so let's add some colours to the points according to which species they represent.

You can encode colours with `color=` or `colour=`

```{r}

iris %>% 
    ggplot(
      aes(
        Sepal.Length,
        Sepal.Width,
        color=Species
        )
          ) +
      geom_point()
  
```

If you provide a continuous variable to `color` you'll get a nice result too.

```{r}
iris %>% 
    ggplot(
      aes(
        Sepal.Length,
        Sepal.Width,
        color=Petal.Length
        )
          ) +
      geom_point()
  
```

You can also use the `shape=` aesthetic to add different shapes. Here we can now see information on sepal length (x), sepal width (y), species (shape) and petal length (color).

```{r}
iris %>% 
    ggplot(
      aes(
        Sepal.Length,
        Sepal.Width,
        color=Petal.Length,
        shape=Species
        )
          ) +
      geom_point()
  
```

You can also use the `size=` aesthetic to get a very different plot.

```{r}

iris %>% 
    ggplot(
      aes(
        Sepal.Length,
        Sepal.Width,
        color=Species,
        size=Petal.Length
        )
          ) +
      geom_point()
  
```

### Line charts

`geom_line()` draws lines between points

```{r}
iris %>% 
    ggplot(
      aes(
        Sepal.Length,
        Sepal.Width,
        )
          ) +
      geom_line()
```

In this case, that makes little sense, because there's three species. Adding the `colour` aesthethic groups the data and the lines will be drawn by group

```{r}
iris %>% 
    ggplot(
      aes(
        Sepal.Length,
        Sepal.Width,
        color=Species,
        )
          ) +
      geom_line()
```

You can combine more than one geom by adding extra layers

```{r}
iris %>% 
    ggplot(
      aes(
        Sepal.Length,
        Sepal.Width,
        color=Species,
        )
          ) +
      geom_line()+
      geom_point()
```

and there's variations like `geom_smooth()` which makes a nicer line

```{r}
iris %>% 
    ggplot(
      aes(
        Sepal.Length,
        Sepal.Width,
        color=Species,
        )
          ) +
      geom_smooth()+
      geom_point()

```

### Facets

Facets allow you to draw multiple panels. `facet_grid` is a nice way to do this.

We'll facet the line chart by `Species`. The facet is an arrangement of panels in columns and rows.

to arrange your facets in rows you provide `facet_grid(.~Species)`

```{r}

iris %>% 
    ggplot(
      aes(
        Sepal.Length,
        Sepal.Width,
        color=Species,
        )
          ) +
      geom_smooth()+
      geom_point()+
  facet_grid(.~Species)

```

To arrange your facets in columns you provide \`facet_grid(Species\~.)

```{r}

iris %>% 
    ggplot(
      aes(
        Sepal.Length,
        Sepal.Width,
        color=Species,
        )
          ) +
      geom_smooth()+
      geom_point()+
  facet_grid(Species~.)
```

To arrange your facets around species in columns and on petal size in rows you could do

```{r}

iris %>% 
  mutate(
    petal_bigger_than_average = Petal.Length >= mean(Petal.Length) 
  ) %>% 
    ggplot(
      aes(
        Sepal.Length,
        Sepal.Width,
        color=Species,
        )
          ) +
      geom_smooth()+
      geom_point()+
  facet_grid(
    petal_bigger_than_average ~  Species
    )
```

A problem with facets can be to do with axes being locked to the minimum and maximum values of the variable. You may wish to 'free' the axes using `scales="free"`, `scales="free_x"` or `scales="free_y"`

```{r}
iris %>% 
    ggplot(
      aes(
        Sepal.Length,
        Sepal.Width,
        color=Species,
        )
          ) +
      geom_smooth()+
      geom_point()+
  facet_grid(
            Petal.Length >= mean(Petal.Length) ~ Species, 
            scales = "free"
            )
```

Finally we can see a linear relationship in some of the data. Setosa for instance has a strong correlation between sepal length and sepal width, which does not appear to be true of the other species, regardless of the petal length division.

### Bar chart

**`geom_bar()`** – Creates bar plots, either stacked or grouped.

```         
-   Example: `geom_bar(stat = "identity")` for bar heights based on a variable.
```

To plot a count of occurrances in the data use `stat="count"`

The default is a stacked bar chart. For this you only need to provide x.

```{r}
iris_data %>% 
    ggplot(
      aes(
        Petal.Length > 4,
        fill = Species
        )
          )+
  geom_bar(stat="count")
```

You can change this to a side-by-side chart using \`position="dodge"

```{r}
iris %>% 
    ggplot(
      aes(
        Petal.Length > 4,
        fill = Species
        )
          )+
  geom_bar(stat="count",
           position = "dodge"
           )
```

```{r}

iris %>% 
    ggplot(
      aes(
        Petal.Length > 4,
        fill = Species
        )
          )+
  geom_bar(stat="count"           )+
  facet_grid(.~Species)
```

In lots of cases you'll have precomputed some summaries and will want to print the exact `identity` values. Let's reframe the iris data as a set of averages (see the reframe section) and then pipe the result in to a ggplot using `stat="identity"` Unlike with the `stat="count"` default, you need to provide both x (grouping) and x (value) data to `stat = "identity`.

```{r}
iris_data %>%
  group_by(Species) %>%
  reframe(
    count = n(),
    mean.sepal.length = mean(Sepal.Length),
    median.petal.length = median(Petal.Length)
  ) %>% 
  
  ggplot(
    aes(
      Species,
      mean.sepal.length,
      fill=Species  
      )
        )+
  geom_bar(stat="identity")

```

### Columnar charts

**`geom_col()`** – Similar to `geom_bar()`, but used when heights are defined by variables instead of counts.

```         
-   Example: `geom_col()`
```

This is essentially identical to using `stat="identity"` with a `geom_bar()`

We can also use `geom_errorbar()` to add confidence intervals.

Note that geom_errorbar has its own set of aesthethics, to cover the upper (`ymax`) and lower (`ymin`) limits.

Let's start by making some statistics

```{r}
iris %>%
  group_by(Species) %>%
  reframe(
    count = n(),
    mean.sepal.length = mean(Sepal.Length),
    sd.sepal.length = sd(Sepal.Length),
    lower = mean.sepal.length - (1.96*sd.sepal.length),
    upper = mean.sepal.length + (1.96*sd.sepal.length)
  ) 
```

Then pipe this in to ggplot

```{r}
iris %>%
  group_by(Species) %>%
  reframe(
    count = n(),
    mean.sepal.length = mean(Sepal.Length),
    sd.sepal.length = sd(Sepal.Length),
    lower = mean.sepal.length - (1.96*sd.sepal.length),
    upper = mean.sepal.length + (1.96*sd.sepal.length)
  ) %>% 
  
  ggplot(
    aes(
      Species,
      mean.sepal.length,
      fill=Species  
      )
        )+
  geom_col()+
  geom_errorbar(aes(ymin = lower, ymax = upper), width = 0.2)
```

### Histograms

**`geom_histogram()`** – Plots the frequency distribution of continuous data by creating bins.

```         
-   Example: `geom_histogram()`
```

Histograms require only values of x

```{r}
iris %>%
  ggplot(
    aes(
      Petal.Length
        )
        )+
  geom_histogram()
```

You can control the number of bins

```{r}
iris %>%
  ggplot(
    aes(
      Petal.Length
        )
        )+
  geom_histogram(bins = 50)
```

You can also add grouping as before

```{r}

iris %>%
  ggplot(
    aes(
      Petal.Length,
      fill = Species
        )
        )+
  geom_histogram()
```

### Density plots

**`geom_density()`** – Shows the distribution of a continuous variable with a smooth density curve.

```         
-   Example: `geom_density()`
```

Density plots are very useful when you want to look at distributions of data in different classes. They are similar in many respects to histograms.

```{r}
iris %>%
  ggplot(
    aes(
      Petal.Length,
      fill = Species
        )
        )+
  geom_density()
```

You'll want to see what's going on in the overlapping regions, so you can add transparency with `alpha=`. Transparency can be used in any ggplot.

```{r}
iris %>%
  ggplot(
    aes(
      Petal.Length,
      fill = Species
        )
        )+
  geom_density(alpha=0.4)
```

### Boxplots

**`geom_boxplot()`** – Visualizes the distribution of a variable through quartiles and potential outliers.

```         
-   Example: `geom_boxplot()`
```

These are a mainstay of epidemiology.

```{r}
iris %>%
  ggplot(
    aes(
      Species,
      Petal.Length,
      fill = Species
        )
        )+
  geom_boxplot()
```

### Violin plots

**`geom_violin()`** – A hybrid of boxplot and density plot, showing distribution shape along with quartiles.

```         
-   Example: `geom_violin()`
```

```{r}
iris %>%
  ggplot(
    aes(
      Species,
      Petal.Length,
      fill = Species
        )
        )+
  geom_violin()
```

### Violin & Box together

Adding a `geom_box()` layer to a violin plot can be useful.

```{r}
iris %>%
  ggplot(
    aes(
      Species,
      Petal.Length,
      fill = Species
        )
        )+
  geom_boxplot()+
  geom_violin()

```

But this is ugly. and the boxplots are obscured by the violins. The order of the layers in a ggplot matters

```{r}
iris %>%
  ggplot(
    aes(
      Species,
      Petal.Length,
      fill = Species
        )
        )+
  geom_violin()+
  geom_boxplot()

```

Changing the order of the layers improves things, but we can control each layer individually by changing it's `mappings`. This is the reason why the geoms all have brackets!

Let's fill the violin plots, adding some transparency. We'll also make the boxes on the boxplots a bit narrower so that we can see all the violin data, and let's remove the outlier points.

```{r}
iris %>%
  ggplot(
    aes(
      Species,
      Petal.Length
        )
        )+
  geom_violin(mapping = aes(fill=Species))+
    geom_boxplot(width=0.1,outliers = F)
```

Finally, let's add the points, jittering them so that they don't all line up along the midlines with `geom_jitter`.

```{r}
iris %>%
  ggplot(
    aes(
      Species,
      Petal.Length
        )
        )+
  geom_violin(mapping = aes(fill=Species))+
    geom_boxplot(width=0.1,outliers = F)+
  geom_jitter(size=0.3,width = 0.2)
```

### Tile plots

**`geom_tile()`** – Creates heatmap-like visuals by filling rectangular areas based on values.

```         
-   Example: `geom_tile()`
```

This kind of heatmap is great for showing the value of a variable (defined with `fill`) in a grid representing several classes on x and y axis.

```{r}

iris %>%
  ggplot(
    aes(
      Species,
      Petal.Length>3,
      fill = Petal.Width
        )
        )+
geom_tile()
```

**`geom_jitter()`** – Adds small random noise to points, useful for avoiding overplotting.

```         
-   Example: `geom_jitter()`
```

**`geom_ribbon()`** – Fills the area between two y-values (usually a line and its confidence interval).

```         
-   Example: `geom_ribbon()`
```

**`geom_text()`** – Adds text annotations to points in the plot.

```         
-   Example: `geom_text(aes(label = ...))`
```

**`geom_errorbar()`** – Adds error bars to plots (e.g., for displaying variability or uncertainty).

```         
-   Example: `geom_errorbar()`
```

### Separate wider

```{r}
df <- tibble(id = 1:3, patient_id = c("m-123", "f-455", "f-123"))
df

```

There are three basic ways to split up a string into pieces

#### With a delimiter

```{r}
df %>% 
  separate_wider_delim (
    patient_id, 
    delim = "-", 
    names = c("gender", "unit")
    )

```

#### By string length

Here you provide a set of widths to map new columns to various characters.

The example data are in the form `m-123` where the `m` represents gender, the `-` is just a delimiter and the `123` is the participant ID.

we can assign characters with `var = n` where n is the width of the string in characters.

`widths = c(gender = 1)`

-   will assign the first character in the strong to a new variable `gender.`

`widths = c(gender = 1, 1)`

-   Assigns the first character in the strong to a new variable `gender.`

-   The next character will be dropped

`widths = c(gender = 1, 1, unit=3)`

-   Assigns the first character in the strong to a new variable `gender.`

-   The next character will be dropped

-   Finally assigns the last 3 characters to a new variable `unit`

#### Or by REGEX

Regular expressions are a poweful language for string matching.

```{r}
df %>% 
  separate_wider_regex(
    patient_id, c(gender = ".", ".", unit = "\\d+"))

```

A full example is like this

```{r}
df %>% 
  separate_wider_position (
    cols = patient_id,
    widths = c(gender = 1, 1, unit=3))
   
```

### Unite

Unite joins columns, or merges them.

```{r}
df <- expand_grid(x = c("a", NA), y = c("b", NA))
df
```

#### Unite, dropping NAs

```{r}
df %>% 
  unite(
    "z",
    x:y,
    na.rm = FALSE,
    remove = FALSE)
```

#### Unite, removing originals and shirt

```{r}
df %>% 
  unite(
    "z",
    x:y, 
    na.rm = TRUE,
    remove = FALSE
    )
```

### Summary of Exclusive Helper Functions:

-   **Conditional Operations**: `case_when()`, `if_else()`

-   **Range Check**: `between()`

-   **Missing Value Handling**: `coalesce()`, `is.na()`

-   **Cumulative Functions**: `cumsum()`, `cummean()`, `cumall()`, `cumany()`

-   **Row-based Operations**: `lag()`, `lead()`, `nth()`, `row_number()`

-   **Summarizing or Counting**: `n()`, `pmin()`, `pmax()`, `any()`, `all()`

These helper functions are used specifically within verbs like `mutate()`, `filter()`, `summarise()`, `arrange()`, and others to perform specialized operations inside the context of a single table.

### Case_when

### 

## 
